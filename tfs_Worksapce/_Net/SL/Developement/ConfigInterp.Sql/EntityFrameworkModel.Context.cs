//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConfigInterp.Sql
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CipEntities : DbContext
    {
        public CipEntities()
            : base("name=CipEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<GetActionDescResult> GetActionDesc(Nullable<int> systemTypeID, Nullable<int> actionTypeID)
        {
            var systemTypeIDParameter = systemTypeID.HasValue ?
                new ObjectParameter("SystemTypeID", systemTypeID) :
                new ObjectParameter("SystemTypeID", typeof(int));
    
            var actionTypeIDParameter = actionTypeID.HasValue ?
                new ObjectParameter("actionTypeID", actionTypeID) :
                new ObjectParameter("actionTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActionDescResult>("GetActionDesc", systemTypeIDParameter, actionTypeIDParameter);
        }
    
        public virtual ObjectResult<GetActionParmDescAndValidationInfoResult> GetActionParmDescAndValidationInfo(Nullable<int> systemTypeID, Nullable<int> actionID)
        {
            var systemTypeIDParameter = systemTypeID.HasValue ?
                new ObjectParameter("SystemTypeID", systemTypeID) :
                new ObjectParameter("SystemTypeID", typeof(int));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActionParmDescAndValidationInfoResult>("GetActionParmDescAndValidationInfo", systemTypeIDParameter, actionIDParameter);
        }
    
        public virtual ObjectResult<GetActionTypeDescResult> GetActionTypeDesc(Nullable<int> systemTypeID)
        {
            var systemTypeIDParameter = systemTypeID.HasValue ?
                new ObjectParameter("SystemTypeID", systemTypeID) :
                new ObjectParameter("SystemTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActionTypeDescResult>("GetActionTypeDesc", systemTypeIDParameter);
        }
    
        public virtual ObjectResult<GetAvailableOutlineCategoryResult> GetAvailableOutlineCategory(Nullable<int> systemTypeID, Nullable<int> outlineID, Nullable<int> categoryID)
        {
            var systemTypeIDParameter = systemTypeID.HasValue ?
                new ObjectParameter("SystemTypeID", systemTypeID) :
                new ObjectParameter("SystemTypeID", typeof(int));
    
            var outlineIDParameter = outlineID.HasValue ?
                new ObjectParameter("OutlineID", outlineID) :
                new ObjectParameter("OutlineID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAvailableOutlineCategoryResult>("GetAvailableOutlineCategory", systemTypeIDParameter, outlineIDParameter, categoryIDParameter);
        }
    
        public virtual ObjectResult<GetCompareTypeDescResult> GetCompareTypeDesc(Nullable<int> systemTypeID, Nullable<int> valueTypeID)
        {
            var systemTypeIDParameter = systemTypeID.HasValue ?
                new ObjectParameter("SystemTypeID", systemTypeID) :
                new ObjectParameter("SystemTypeID", typeof(int));
    
            var valueTypeIDParameter = valueTypeID.HasValue ?
                new ObjectParameter("ValueTypeID", valueTypeID) :
                new ObjectParameter("ValueTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompareTypeDescResult>("GetCompareTypeDesc", systemTypeIDParameter, valueTypeIDParameter);
        }
    
        public virtual ObjectResult<GetConditionTypeDescResult> GetConditionTypeDesc()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConditionTypeDescResult>("GetConditionTypeDesc");
        }
    
        public virtual ObjectResult<GetExceptionDescResult> GetExceptionDesc(Nullable<int> systemTypeID)
        {
            var systemTypeIDParameter = systemTypeID.HasValue ?
                new ObjectParameter("SystemTypeID", systemTypeID) :
                new ObjectParameter("SystemTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExceptionDescResult>("GetExceptionDesc", systemTypeIDParameter);
        }
    
        public virtual ObjectResult<GetFieldNameDescResult> GetFieldnameDesc(Nullable<int> systemTypeID, Nullable<int> fieldTypeID)
        {
            var systemTypeIDParameter = systemTypeID.HasValue ?
                new ObjectParameter("SystemTypeID", systemTypeID) :
                new ObjectParameter("SystemTypeID", typeof(int));
    
            var fieldTypeIDParameter = fieldTypeID.HasValue ?
                new ObjectParameter("FieldTypeID", fieldTypeID) :
                new ObjectParameter("FieldTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFieldNameDescResult>("GetFieldnameDesc", systemTypeIDParameter, fieldTypeIDParameter);
        }
    
        public virtual ObjectResult<GetFieldTypeDescResult> GetFieldTypeDesc(Nullable<int> systemTypeID)
        {
            var systemTypeIDParameter = systemTypeID.HasValue ?
                new ObjectParameter("SystemTypeID", systemTypeID) :
                new ObjectParameter("SystemTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFieldTypeDescResult>("GetFieldTypeDesc", systemTypeIDParameter);
        }
    
        public virtual ObjectResult<GetFieldValidationInfoResult> GetFieldValidationInfo(Nullable<int> systemTypeID, Nullable<int> fieldTypeID, Nullable<int> fieldID)
        {
            var systemTypeIDParameter = systemTypeID.HasValue ?
                new ObjectParameter("SystemTypeID", systemTypeID) :
                new ObjectParameter("SystemTypeID", typeof(int));
    
            var fieldTypeIDParameter = fieldTypeID.HasValue ?
                new ObjectParameter("FieldTypeID", fieldTypeID) :
                new ObjectParameter("FieldTypeID", typeof(int));
    
            var fieldIDParameter = fieldID.HasValue ?
                new ObjectParameter("FieldID", fieldID) :
                new ObjectParameter("FieldID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFieldValidationInfoResult>("GetFieldValidationInfo", systemTypeIDParameter, fieldTypeIDParameter, fieldIDParameter);
        }
    }
}
